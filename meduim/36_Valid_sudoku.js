// https://leetcode.com/problems/valid-sudoku/
// Input: board =
// 	[["5","3",".",".","7",".",".",".","."]
// 		,["6",".",".","1","9","5",".",".","."]
// 		,[".","9","8",".",".",".",".","6","."]
// 		,["8",".",".",".","6",".",".",".","3"]
// 		,["4",".",".","8",".","3",".",".","1"]
// 		,["7",".",".",".","2",".",".",".","6"]
// 		,[".","6",".",".",".",".","2","8","."]
// 		,[".",".",".","4","1","9",".",".","5"]
// 		,[".",".",".",".","8",".",".","7","9"]]
// Output: true
// Input: board2 =
// 	[["8","3",".",".","7",".",".",".","."]
// 		,["6",".",".","1","9","5",".",".","."]
// 		,[".","9","8",".",".",".",".","6","."]
// 		,["8",".",".",".","6",".",".",".","3"]
// 		,["4",".",".","8",".","3",".",".","1"]
// 		,["7",".",".",".","2",".",".",".","6"]
// 		,[".","6",".",".",".",".","2","8","."]
// 		,[".",".",".","4","1","9",".",".","5"]
// 		,[".",".",".",".","8",".",".","7","9"]]
// Output: false
// let board = [
//     ["5", "3", ".", ".", "7", ".", ".", ".", "."],
//     ["6", ".", ".", "1", "9", "5", ".", ".", "."],
//     [".", "9", "8", ".", ".", ".", ".", "6", "."],
//     ["8", ".", ".", ".", "6", ".", ".", ".", "3"],
//     ["4", ".", ".", "8", ".", "3", ".", ".", "1"],
//     ["7", ".", ".", ".", "2", ".", ".", ".", "6"],
//     [".", "6", ".", ".", ".", ".", "2", "8", "."],
//     [".", ".", ".", "4", "1", "9", ".", ".", "5"],
//     [".", ".", ".", ".", "8", ".", ".", "7", "9"],
//   ], //true
//   board2 = [
//     ["8", "3", ".", ".", "7", ".", ".", ".", "."],
//     ["6", ".", ".", "1", "9", "5", ".", ".", "."],
//     [".", "9", "8", ".", ".", ".", ".", "6", "."],
//     ["8", ".", ".", ".", "6", ".", ".", ".", "3"],
//     ["4", ".", ".", "8", ".", "3", ".", ".", "1"],
//     ["7", ".", ".", ".", "2", ".", ".", ".", "6"],
//     [".", "6", ".", ".", ".", ".", "2", "8", "."],
//     [".", ".", ".", "4", "1", "9", ".", ".", "5"],
//     [".", ".", ".", ".", "8", ".", ".", "7", "9"],
//   ], //false (column)
//   board3 = [
//     [".", ".", ".", ".", "5", ".", ".", "1", "."],
//     [".", "4", ".", "3", ".", ".", ".", ".", "."],
//     [".", ".", ".", ".", ".", "3", ".", ".", "1"],
//     ["8", ".", ".", ".", ".", ".", ".", "2", "."],
//     [".", ".", "2", ".", "7", ".", ".", ".", "."],
//     [".", "1", "5", ".", ".", ".", ".", ".", "."],
//     [".", ".", ".", ".", ".", "2", ".", ".", "."],
//     [".", "2", ".", "9", ".", ".", ".", ".", "."],
//     [".", ".", "4", ".", ".", ".", ".", ".", "."],
//   ]; // false (cube)
// function isValid(digits) {
//   let set = new Set();
//   for (let i = 0; i < digits.length; i++) {
//     if (digits[i] === ".") continue;
//     if (set.has(digits[i])) {
//       return false;
//     } else {
//       set.add(digits[i]);
//     }
//   }
//   return true;
// }
// var isValidSudoku = function (board) {
//   let columns = [[], [], [], [], [], [], [], [], []];
//   for (let i = 0; i < board.length; i++) {
//     const row = board[i];
//     if (!isValid(row)) return false;
//     for (let j = 0; j < row.length; j++) {
//       const cell = row[j];
//       columns[j].push(cell);
//     }
//   }
//   for (let column of columns) {
//     if (!isValid(column)) return false;
//   }
//   // cube
//   for (let i = 0; i < 3; i++) {
//     for (let j = 0; j < 3; j++) {
//       const set = new Set();
//       for (let k = 0; k < 3; k++) {
//         for (let l = 0; l < 3; l++) {
//           // console.log(set);
//           const cell = board[3 * i + k][3 * j + l];
//           if (cell === ".") continue;
//           if (set.has(cell)) return false;
//           set.add(cell);
//         }
//       }
//     }
//   }
//   return true;
// };
// console.log(isValidSudoku(board3));
